class GBFramework
!!!135120.cpp!!!	~GBFramework()
//    UtilLog::cabecalho("Finalizando Ambiente do Escopo do Jogo");
//    UtilLog::cabecalho("Descarregando Framework");

    delete(fpsSystem);
    delete(writeSystem);
//    delete(GraphicSystemImageBufferManager::getInstance());
    delete(Imagem::Layer::LayerManager::getInstance());
    delete(graphicSystemCore);
    delete(soundSystemCore);
    delete(inputSystemCore);

  //  UtilLog::sistema("Removendo SDL");
    SDL_Quit();

    //UtilLog::cabecalho("Descarregando Completo do Framework");
    //UtilLog::finalizar();
!!!134992.cpp!!!	GBFramework()
    numscreenshot = 0;
    fps           = false;
!!!135504.cpp!!!	atualizar() : void
    try {
        fpsSystem->processar();

        if (isFPS()){
            //writeSystem->getFonte(Kernel::Write::WriteManager::defaultFont)->setAlpha(180);
            writeSystem->escrever(Kernel::Write::WriteManager::defaultFont,0,0,"FPS: %d",fpsSystem->getValor());
            //writeSystem->escrever(Kernel::Write::WriteManager::defaultFont,0,0,"FPS: %d",fpsSystem->getFPS());
            //writeSystem->getFonte(Kernel::Write::WriteManager::defaultFont)->setAlpha(255);
        }

        controleInterno();
        inputSystemCore->processar();
        graphicSystemCore->flip();
    } catch(...){
        //UtilLog::tracer("SDL: %s", SDL_GetError());
        //UtilLog::tracer("SDL_Image: %s", IMG_GetError());
        //UtilLog::tracer("SDL_Mixer: %s", Mix_GetError());
    }
!!!136144.cpp!!!	getPath() : std::string
    return Kernel::Util::Path::getPath();
!!!135376.cpp!!!	iniciar(in width : int, in height : int, in bpp_color : int, in full : bool, in fps : Tipo) : void
    //UtilLog::cabecalho("Inicializando Framework");
   // UtilLog::tracer("Inicializando ModoGráfico");


    Kernel::Graphic::VideoConfig config;
    config.w     = width;
    config.h     = height;
    config.color = bpp_color;
    config.full  = full;
    graphicSystemCore->gsMode.setConfig(config);

    if (config.full){
        graphicSystemCore->gsMode.setModeFullScreen();
    } else {
        graphicSystemCore->gsMode.setModeWindowScreen();
    }

    graphicSystemCore->iniciar();
    inputSystemCore->iniciar();
    soundSystemCore->iniciar(22050,AUDIO_S16SYS,Kernel::Sound::CANAL_STEREO,2048,16);

    //input.mouse.Carregar(&pacote,"cursor.bmp");

    //Carregando Fontes Padrões
    //UtilLog::tracer("Carregando Fonte Padrão para FonteManager");
    writeSystem->carregar(Kernel::Write::WriteManager::defaultFont,"data//kernel//fonte//default.png");

    //UtilLog::tracer("Carregando Padrões para Fundo de Janelas");
    graphicSystemCore->graphicSystem->imageBufferManager->carregar("gbf-window-background","data//kernel//imagem//window-background.png");

    //Detecta o idioma padrão do ambiente (Sistema Operacional)
    writeSystem->idioma->detectarIdioma();

    //FPS
    fpsSystem = Kernel::FPS::FPSFactory::criar(fps);
    //FPS primeira chamada
    fpsSystem->iniciar();

    //UtilLog::cabecalho("Iniciando Ambiente para Escopo do Jogo");
!!!135888.cpp!!!	isFPS() : bool
    return fps;
!!!135760.cpp!!!	setFPS(in show : bool) : void
    fps=show;
!!!136016.cpp!!!	setPath(inout fullPath : char) : void
    std::string pathBase=Kernel::Util::StringExtract::extractPath(fullPath);

   // if (isDefaultPath()){
        Kernel::Util::Path::setPath(pathBase);
        //UtilLog::setArquivo(fullPath);
        //Kernel::Graphic::ImageBufferManager::setPathBase(pathBase);
        //Kernel::Sound::SoundManagerAbstract::setPathBase(pathBase);
        //Kernel::Write::Idioma::setPathBase(pathBase);
    //}
!!!135248.cpp!!!	setTitulo(in titulo : std::string, in autor : std::string) : void
//    UtilLog::setAutor(autor);
//    UtilLog::setProjeto(titulo);
    carregar();
    setTitulo(titulo);
!!!136784.cpp!!!	carregar() : void
    //Inicializando Log
//    UtilLog::iniciar();

    //Inicializando Gerador Randômico
   // UtilLog::sistema("Inicializando Gerador Randômico");
    srand(time(NULL));


    //Inicializando Video
    graphicSystemCore = new Kernel::Graphic::GraphicCore();
    Imagem::Layer::LayerManager::getInstance();

    //Inicializando Gerenciador de Fontes
    writeSystem = Kernel::Write::WriteManager::getInstance();

    //Inicializando Input
    inputSystemCore = new Kernel::Input::InputCore();

    //Inicializando Audio
    soundSystemCore = new Kernel::Sound::SoundCore();

   // UtilLog::cabecalho("Carregamento Completo do Framework");
!!!136528.cpp!!!	controleInterno() : void
    //F10 = Alterna entre modo de controle exclusivo
    if (inputSystemCore->inputSystem->teclado->isKey(SDLK_F10)){
        inputSystemCore->alternarControleExclusivo();
    //F11 = Alterna entre modo tela Cheia e Janela
    } else if (inputSystemCore->inputSystem->teclado->isKey(SDLK_F11)){
        if (SDL_WM_ToggleFullScreen(graphicSystemCore->gsMode.getScreen())==0){
            //UtilLog::getInstance()->inicializando("GBF :: Aviso");
            //UtilLog::getInstance()->comentario("Sem Suporte a troca entre FullScreen e WindowScreen");
        }
    //F12 = Salva um screen do jogo
    } else if (inputSystemCore->inputSystem->teclado->isKey(SDLK_F12)){
        char tela[255];
        numscreenshot++;
        sprintf(tela,"%s//data//screen//screen%03d.bmp",getPath().c_str(),numscreenshot);
        graphicSystemCore->salvarScreenShot(tela);
    //F5 = Tira o Som
    } else if (inputSystemCore->inputSystem->teclado->isKey(SDLK_F5)){
        //audio.Mute();
    }
!!!136656.cpp!!!	setTitulo(in titulo : std::string) : void
    SDL_WM_SetCaption(titulo.c_str(),NULL);
